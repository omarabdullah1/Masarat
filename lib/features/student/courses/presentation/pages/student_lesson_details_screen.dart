import 'package:chewie/chewie.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:masarat/core/di/dependency_injection.dart';
import 'package:masarat/core/utils/app_colors.dart';
import 'package:masarat/core/widgets/custom_scaffold.dart';
import 'package:masarat/core/widgets/custom_text.dart';
import 'package:masarat/features/student/courses/data/models/lesson_model.dart';
import 'package:masarat/features/student/courses/services/course_state_service.dart';
import 'package:video_player/video_player.dart';

class StudentLessonDetailsScreen extends StatefulWidget {
  const StudentLessonDetailsScreen(
      {required this.lectureId, this.lesson, super.key});
  final String lectureId;
  final LessonModel? lesson;

  @override
  State<StudentLessonDetailsScreen> createState() =>
      _StudentLessonDetailsScreenState();
}

class _StudentLessonDetailsScreenState
    extends State<StudentLessonDetailsScreen> {
  // Video player controllers
  late VideoPlayerController _videoPlayerController;
  ChewieController? _chewieController;
  bool _isLoading = true;
  bool _hasError = false;
  String videoTitle = "Introduction to Accounting";

  // Default M3U playlist URL in case the lesson content is missing
  String _m3uUrl = '';

  // Get M3U URL from lesson content if available, otherwise fallback to empty string
  String _getM3uUrl() {
    // First try to get the lesson from CourseStateService
    final courseService = getIt<CourseStateService>();
    final apiLesson = courseService.getLessonById(widget.lectureId);

    String? contentUrl;

    // If we found the lesson in CourseStateService and it has content
    if (apiLesson != null &&
        apiLesson.content != null &&
        apiLesson.content!.isNotEmpty) {
      debugPrint('Using content from CourseStateService: ${apiLesson.content}');
      contentUrl = apiLesson.content!;
    }
    // Then try using the lesson passed to this widget
    else if (widget.lesson != null &&
        widget.lesson!.content != null &&
        widget.lesson!.content!.isNotEmpty) {
      // Check if the content is a video URL (m3u8 is for HLS streaming)
      if (widget.lesson!.content!.contains('.m3u') ||
          widget.lesson!.content!.contains('.mp4') ||
          widget.lesson!.content!.contains('.m3u8') ||
          widget.lesson!.content!.startsWith('http')) {
        debugPrint(
            'Using content from passed lesson: ${widget.lesson!.content}');
        contentUrl = widget.lesson!.content!;
      }
    }

    // Just return the content as-is with no fallback if nothing found
    if (contentUrl == null) {
      return widget.lesson?.content ?? '';
    }

    // If we have a BunnyCDN URL, try to enhance it
    if (contentUrl.contains('vz-d81d8c7d-6eb.b-cdn.net')) {
      debugPrint('Enhancing BunnyCDN URL for better compatibility');

      // Parse URL to see if it already has parameters
      final uri = Uri.parse(contentUrl);

      // Log URL structure for debugging
      debugPrint('URL parts: ${uri.pathSegments}');
      debugPrint('URL query params: ${uri.queryParameters}');

      // If it doesn't already have a token parameter, we don't modify it
      // A proper token would need to be generated by the backend
    }

    return contentUrl;
  }

  @override
  void initState() {
    super.initState();

    // Debug the lesson passed to this screen
    if (widget.lesson != null) {
      debugPrint(
          'LectureDetailsScreen received lesson: ${widget.lesson!.title}');
      debugPrint('Lesson content: ${widget.lesson!.content}');
      debugPrint('Lesson ID: ${widget.lesson!.id}');
    } else {
      debugPrint('No lesson was provided to LectureDetailsScreen');
    }

    // Get M3U URL from the lesson content or fallback to defaults
    _m3uUrl = _getM3uUrl();
    debugPrint('Using M3U URL: $_m3uUrl');

    videoTitle = widget.lesson?.title ?? videoTitle;
    _initializePlayer();
  }

  Future<void> _initializePlayer() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });

    try {
      debugPrint('Initializing video player with URL: $_m3uUrl');

      // Check if URL is empty
      if (_m3uUrl.isEmpty) {
        throw Exception('Video URL is empty - no content available');
      }

      // Try alternative URLs or formats that might work with the player
      // If the online player can play it, there must be a way our app can too

      // First try: Use direct URL with more permissive headers
      final Map<String, String> headers = {
        'Referer': 'https://bunnycdn.com/',
        'Origin': 'https://bunnycdn.com',
        'User-Agent':
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15',
        'Accept': '*/*',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Range': 'bytes=0-', // Important for some streaming servers
      };

      debugPrint('Initializing player with enhanced headers for CDN access');
      _videoPlayerController = VideoPlayerController.networkUrl(
        Uri.parse(_m3uUrl),
        httpHeaders: headers,
      );

      await _videoPlayerController.initialize();

      _chewieController = ChewieController(
        videoPlayerController: _videoPlayerController,
        aspectRatio: 16 / 9,
        autoPlay: false,
        looping: false,
        allowPlaybackSpeedChanging: true,
        placeholder: Container(
          color: Colors.black,
          child: const Center(
            child: CircularProgressIndicator(color: AppColors.primary),
          ),
        ),
        errorBuilder: (context, errorMessage) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.error_outline,
                  color: Colors.white,
                  size: 30.sp,
                ),
                SizedBox(height: 8.h),
                CustomText(
                  text: 'فشل تحميل الفيديو',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16.sp,
                  ),
                ),
              ],
            ),
          );
        },
      );

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      debugPrint('Error initializing video player: $e');

      // More detailed error logging for debugging purposes
      String errorType = 'Unknown';
      String errorDetails = '';

      if (e.toString().contains('403') || e.toString().contains('Forbidden')) {
        errorType = 'Permission Denied (403)';
        errorDetails =
            'The streaming server requires authentication or is denying access.';

        // Suggest possible solutions for 403 error
        debugPrint('Possible solutions for 403 Forbidden:');
        debugPrint(
            '1. Check if the CDN restricts playback based on domain/referrer');
        debugPrint(
            '2. The URL might require an auth token appended as a query parameter');
        debugPrint(
            '3. Try playing this URL in a WebView with standard browser headers');
        debugPrint(
            '4. Check if your online HLS player has specific referrer/user-agent settings');
      } else if (e.toString().contains('404') ||
          e.toString().contains('Not Found')) {
        errorType = 'Resource Not Found (404)';
        errorDetails = 'The video file could not be found on the server.';
      } else if (e.toString().contains('timeout') ||
          e.toString().contains('timed out')) {
        errorType = 'Connection Timeout';
        errorDetails = 'The connection to the streaming server timed out.';
      } else if (e.toString().contains('certificate') ||
          e.toString().contains('SSL')) {
        errorType = 'SSL Certificate Error';
        errorDetails =
            'There was an issue with the server\'s security certificate.';
      }

      debugPrint('Streaming error type: $errorType');
      debugPrint('Streaming error details: $errorDetails');
      debugPrint('Streaming error with URL $_m3uUrl: $e');

      setState(() {
        _isLoading = false;
        _hasError = true;
      });
    }
  }

  @override
  void dispose() {
    _videoPlayerController.dispose();
    _chewieController?.dispose();
    super.dispose();
  }

  // Function to change the video source
  Future<void> changeVideoSource(String url) async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });

    // Dispose previous controllers
    _chewieController?.dispose();
    await _videoPlayerController.dispose();

    try {
      // Initialize new controllers
      _videoPlayerController = VideoPlayerController.networkUrl(Uri.parse(url));
      await _videoPlayerController.initialize();

      _chewieController = ChewieController(
        videoPlayerController: _videoPlayerController,
        aspectRatio: 16 / 9,
        autoPlay: true,
        looping: false,
        allowPlaybackSpeedChanging: true,
        placeholder: Container(
          color: Colors.black,
          child: const Center(
            child: CircularProgressIndicator(color: AppColors.primary),
          ),
        ),
        errorBuilder: (context, errorMessage) {
          return _buildVideoErrorWidget();
        },
      );

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
        _hasError = true;
      });
      debugPrint('Error changing video source: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    // Create a dynamic title based on lesson information if available
    final String title = widget.lesson != null
        ? 'المحاضرة: ${widget.lesson!.title}'
        : 'المحاضرة الأولى: أساسيات المحاسبة';

    return CustomScaffold(
      haveAppBar: true,
      backgroundColorAppColor: AppColors.background,
      backgroundColor: AppColors.background,
      drawerIconColor: AppColors.primary,
      title: title,
      body: Column(
        children: [
          // M3U Video Player
          Container(
            height: 220.h,
            width: double.infinity,
            margin: EdgeInsets.symmetric(horizontal: 16.w, vertical: 16.h),
            decoration: BoxDecoration(
              color: Colors.black87,
              borderRadius: BorderRadius.circular(8.r),
            ),
            clipBehavior: Clip.hardEdge,
            child: _isLoading
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const CircularProgressIndicator(
                            color: AppColors.primary),
                        SizedBox(height: 16.h),
                        CustomText(
                          text: 'جاري تحميل الفيديو...',
                          style: TextStyle(
                            fontSize: 14.sp,
                            color: Colors.white70,
                          ),
                        ),
                      ],
                    ),
                  )
                : _hasError
                    ? _buildVideoErrorWidget()
                    : ClipRRect(
                        borderRadius: BorderRadius.circular(8.r),
                        child: _chewieController != null
                            ? Chewie(controller: _chewieController!)
                            : _buildVideoErrorWidget(),
                      ),
          ),

          // Lecture Content
          Expanded(
            child: SingleChildScrollView(
              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  CustomText(
                    text: 'محتوى المحاضرة',
                    style: TextStyle(
                      fontSize: 18.sp,
                      fontWeight: FontWeight.bold,
                      color: AppColors.text100,
                    ),
                  ),
                  SizedBox(height: 16.h),
                  CustomText(
                    text:
                        'تتناول هذه المحاضرة المفاهيم الأساسية للمحاسبة وتشمل:',
                    style: TextStyle(
                      fontSize: 16.sp,
                      color: AppColors.text100,
                    ),
                  ),
                  SizedBox(height: 8.h),
                  _buildListItem('مبادئ المحاسبة الأساسية'),
                  _buildListItem('أنواع الحسابات والدفاتر المحاسبية'),
                  _buildListItem('معادلة الميزانية العمومية'),
                  _buildListItem('مفهوم القيد المزدوج'),
                  SizedBox(height: 24.h),
                  CustomText(
                    text: 'المرفقات والموارد',
                    style: TextStyle(
                      fontSize: 18.sp,
                      fontWeight: FontWeight.bold,
                      color: AppColors.text100,
                    ),
                  ),
                  SizedBox(height: 16.h),
                  _buildAttachmentItem(
                      'ملخص المحاضرة (PDF)', Icons.picture_as_pdf),
                  _buildAttachmentItem('أوراق العمل (XLSX)', Icons.table_chart),
                  _buildAttachmentItem('تمارين تطبيقية', Icons.assignment),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildListItem(String text) {
    return Padding(
      padding: EdgeInsets.only(bottom: 8.h),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(Icons.circle, size: 8.sp, color: AppColors.primary),
          SizedBox(width: 8.w),
          Expanded(
            child: CustomText(
              text: text,
              style: TextStyle(
                fontSize: 14.sp,
                color: AppColors.text100,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAttachmentItem(String title, IconData icon) {
    return Container(
      margin: EdgeInsets.only(bottom: 12.h),
      padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 12.h),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8.r),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.05 * 255).toInt()),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Icon(icon, size: 24.sp, color: AppColors.primary),
          SizedBox(width: 16.w),
          Expanded(
            child: CustomText(
              text: title,
              style: TextStyle(
                fontSize: 14.sp,
                color: AppColors.text100,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          Icon(Icons.download, size: 20.sp, color: AppColors.gray),
        ],
      ),
    );
  }

  Widget _buildVideoErrorWidget() {
    bool isPermissionError = false;
    if (_m3uUrl.contains('vz-d81d8c7d-6eb.b-cdn.net')) {
      isPermissionError = true;
    }

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            isPermissionError ? Icons.lock : Icons.error_outline,
            size: 40.sp,
            color: Colors.white70,
          ),
          SizedBox(height: 12.h),
          CustomText(
            text: isPermissionError
                ? 'لا يمكن الوصول للفيديو: يتطلب تفويض من خادم البث'
                : 'فشل تحميل الفيديو',
            style: TextStyle(
              fontSize: 16.sp,
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
          if (isPermissionError)
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 30.w, vertical: 8.h),
              child: CustomText(
                text:
                    'يحتاج الخادم إلى رمز مصادقة للوصول لهذا المحتوى، يرجى التواصل مع المسؤول',
                style: TextStyle(
                  fontSize: 14.sp,
                  color: Colors.white70,
                ),
                textAlign: TextAlign.center,
              ),
            ),
          SizedBox(height: 8.h),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _initializePlayer,
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primary,
                  foregroundColor: Colors.white,
                  padding:
                      EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
                ),
                child: const CustomText(
                  text: 'إعادة المحاولة',
                ),
              ),
              SizedBox(width: 8.w),
              // Back button for easier navigation
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.grey[700],
                  foregroundColor: Colors.white,
                  padding:
                      EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
                ),
                child: const CustomText(
                  text: 'العودة',
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
